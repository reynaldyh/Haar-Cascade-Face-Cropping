#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 19 13:54:00 2018

@author: reynaldyhardiyanto
"""

from scipy.interpolate import UnivariateSpline
import cv2
import numpy as np

#http://www.askaswiss.com/2016/02/how-to-manipulate-color-temperature-opencv-python.html
def create_LUT_8UC1(x, y):
    spl = UnivariateSpline(x, y)
    return spl(range(256))

def warm_img(img_bgr_in):
    incr_ch_lut = create_LUT_8UC1([0, 64, 128, 192, 256],
        [0, 70, 140, 210, 256])
    decr_ch_lut = create_LUT_8UC1([0, 64, 128, 192, 256],
        [0, 30, 80, 120, 192])
    c_b, c_g, c_r = cv2.split(img_bgr_in)
    c_r = cv2.LUT(c_r, incr_ch_lut).astype(np.uint8)
    c_b = cv2.LUT(c_b, decr_ch_lut).astype(np.uint8)
    img_bgr_warm = cv2.merge((c_b, c_g, c_r))
    c_b = cv2.LUT(c_b, decr_ch_lut).astype(np.uint8)
    # increase color saturation
    c_h, c_s, c_v = cv2.split(cv2.cvtColor(img_bgr_warm,
        cv2.COLOR_BGR2HSV))
    c_s = cv2.LUT(c_s, incr_ch_lut).astype(np.uint8)
     
    img_bgr_warm = cv2.cvtColor(cv2.merge(
        (c_h, c_s, c_v)),
        cv2.COLOR_HSV2BGR)
    return img_bgr_warm

def cool_img(img_bgr_in):
    incr_ch_lut = create_LUT_8UC1([0, 64, 128, 192, 256],
        [0, 70, 140, 210, 256])
    decr_ch_lut = create_LUT_8UC1([0, 64, 128, 192, 256],
        [0, 30, 80, 120, 192])
    c_b, c_g, c_r = cv2.split(img_bgr_in)
    c_r = cv2.LUT(c_r, decr_ch_lut).astype(np.uint8)
    c_b = cv2.LUT(c_b, incr_ch_lut).astype(np.uint8)
    img_bgr_cold = cv2.merge((c_b, c_g, c_r))
     
    # decrease color saturation
    c_h, c_s, c_v = cv2.split(cv2.cvtColor(img_bgr_cold,
        cv2.COLOR_BGR2HSV))
    c_s = cv2.LUT(c_s, decr_ch_lut).astype(np.uint8)
    img_bgr_cold = cv2.cvtColor(cv2.merge(
        (c_h, c_s, c_v)),
        cv2.COLOR_HSV2BGR)
    return img_bgr_cold

def avr_smooth(image,size):
    kernel = np.ones((size,size),np.float32)/(size**2)
    img = cv2.filter2D(image,-1,kernel)
    return img
    
def gauss_smooth(image,size,sig):
    kernel = gkern(size,sig)
    img = cv2.filter2D(image,-1,kernel)
    return img  

def gkern(l, sig):
    """
    creates gaussian kernel with side length l and a sigma of sig
    """
    ax = np.arange(-l // 2 + 1., l // 2 + 1.)
    xx, yy = np.meshgrid(ax, ax)
    kernel = np.exp(-(xx**2 + yy**2) / (2. * sig**2))
    return kernel / np.sum(kernel)

def sharpen(image):
    kernel = np.array([[-1,-1,-1], [-1,9,-1], [-1,-1,-1]])
    img = cv2.filter2D(image,-1,kernel)
    return img 

def sephia(image):
    kernel = np.array([[0.272,0.534,0.131], [0.349,0.686,0.168], [0.393,0.769,0.189]])
    img = cv2.transform(image,kernel)
    return img

img  = cv2.imread("/Users/reynaldyhardiyanto/Desktop/tes.jpg")
img  = cv2.resize(img,(640,480))
img_tes = warm_img(img)
cv2.imshow('bs',img)
cv2.imshow('as',img_tes)
cv2.waitKey(0)
cv2.destroyAllWindows()
